package burp;import javax.swing.*;import java.awt.*;import java.awt.event.MouseAdapter;import java.awt.event.MouseEvent;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collections;import java.util.HashSet;import java.util.regex.Matcher;import java.util.regex.Pattern;public class BurpExtender implements IBurpExtender, ITab {    public PrintWriter stdout;    public IExtensionHelpers helpers;    //输入框    public ITextEditor maincontext;    //输出框    public ITextEditor resultcontext;    //对IP地址进行筛选排序按钮    private JButton jButton1;    //对域名进行筛选排序按钮    private JButton jButton2;    //按钮排布面板    private JPanel jPanelbtn;    //主界面左右分割面板    private JSplitPane jSplitPane;    //输入输出框界面排布面板    private JSplitPane resultPane;    //从数据中提取IP地址    public static String findIP(String context) {        String iplist = "";        String regEx = "((2[0-4]\\d|25[0-5]|[01]?\\d\\d?)\\.){3}(2[0-4]\\d|25[0-5]|[01]?\\d\\d?)";        Pattern r = Pattern.compile(regEx);        Matcher m = r.matcher(context);        while (m.find()) {            iplist += (m.group() + " ");        }        return iplist;    }    //从数据中提取域名地址    public static String findDomain(String Context) {        String domainlist = "";        String regEx = "[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(\\.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+";        //        String regEx = "[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?";        Pattern r = Pattern.compile(regEx);        Matcher m = r.matcher(Context);        while (m.find()) {            domainlist += (m.group() + " ");        }        //对数据进行去重处理        String[] s = domainlist.split(" ");        ArrayList sortdomain = new ArrayList(s.length);        for (String string : s) {            sortdomain.add(string);        }        HashSet h = new HashSet(sortdomain);        sortdomain.clear();        sortdomain.addAll(h);        Collections.sort(sortdomain);        domainlist = "";        for (int i = 0; i < sortdomain.size(); i++) {            domainlist += sortdomain.get(i) + "\r\n";        }        return domainlist;    }    //对IP地址进行排序    public static String IpSortFunc(String iplist) {        String[] s = iplist.split(" ");        ArrayList sortip = new ArrayList(s.length);        for (String string : s) {            sortip.add((long) ipToLong(string));        }        //对数据进行去重处理        HashSet h = new HashSet(sortip);        sortip.clear();        sortip.addAll(h);        Collections.sort(sortip);        String result = "";        for (int i = 0; i < sortip.size(); i++) {            result += (longToIP((long) sortip.get(i)) + "\r\n");        }        return result;    }    //将IP地址转换为Long类型    public static long ipToLong(String strIp) {        long[] ip = new long[4];        // 先找到IP地址字符串中.的位置        int position1 = strIp.indexOf(".");        int position2 = strIp.indexOf(".", position1 + 1);        int position3 = strIp.indexOf(".", position2 + 1);        // 将每个.之间的字符串转换成整型        ip[0] = Long.parseLong(strIp.substring(0, position1));        ip[1] = Long.parseLong(strIp.substring(position1 + 1, position2));        ip[2] = Long.parseLong(strIp.substring(position2 + 1, position3));        ip[3] = Long.parseLong(strIp.substring(position3 + 1));        return (ip[0] << 24) + (ip[1] << 16) + (ip[2] << 8) + ip[3];    }    // 将十进制整数形式转换成127.0.0.1形式的ip地址    public static String longToIP(long longIp) {        StringBuffer sb = new StringBuffer("");        // 直接右移24位        sb.append(String.valueOf((longIp >>> 24)));        sb.append(".");        // 将高8位置0，然后右移16位        sb.append(String.valueOf((longIp & 0x00FFFFFF) >>> 16));        sb.append(".");        // 将高16位置0，然后右移8位        sb.append(String.valueOf((longIp & 0x0000FFFF) >>> 8));        sb.append(".");        // 将高24位置0        sb.append(String.valueOf((longIp & 0x000000FF)));        return sb.toString();    }    @Override    public void registerExtenderCallbacks(final IBurpExtenderCallbacks callbacks) {        this.stdout = new PrintWriter(callbacks.getStdout(), true);        this.helpers = callbacks.getHelpers();        callbacks.setExtensionName("SortIP");        stdout.println("SortIP V1.0");        stdout.println("Auth:Coeus");        stdout.println("Email:Coeus94@gmail.com");        SwingUtilities.invokeLater(new Runnable() {            @Override            public void run() {                jSplitPane = new JSplitPane();//                jSplitPane.setDividerLocation(1000);                jSplitPane.setResizeWeight(0.99);                jButton1 = new JButton("提取IP地址并进行排序");                jButton2 = new JButton("批量提取域名");                jPanelbtn = new JPanel();                jPanelbtn.setLayout(new FlowLayout());                jPanelbtn.add(jButton1);                jPanelbtn.add(jButton2);                maincontext = callbacks.createTextEditor();                maincontext.setEditable(true);                resultcontext=callbacks.createTextEditor();                resultcontext.setEditable(true);                resultPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,true,maincontext.getComponent(),resultcontext.getComponent());                resultPane.setResizeWeight(0.5);                jSplitPane.setLeftComponent(resultPane);                jSplitPane.setRightComponent(jPanelbtn);                jSplitPane.setOneTouchExpandable(false);                //按钮2，查找域名的监听器                jButton2.addMouseListener(new MouseAdapter() {                    @Override                    public void mouseClicked(MouseEvent e) {                        if (maincontext.getText() != null) {                            resultcontext.setText(findDomain(new String(maincontext.getText())).getBytes());                        } else {                            stdout.println("文本为空");                        }                        super.mouseClicked(e);                    }                });                //按钮1，查找IP的监听器                jButton1.addMouseListener(new MouseAdapter() {                    @Override                    public void mouseClicked(MouseEvent e) {                        if (maincontext.getText() != null) {                            resultcontext.setText(IpSortFunc(findIP(new String(maincontext.getText()) + "")).getBytes());                        } else {                            stdout.println("文本为空");                        }                    }                });                //自定义的 UI 组件                callbacks.customizeUiComponent(jSplitPane);                //将自定义的标签页添加到Burp UI 中                callbacks.addSuiteTab(BurpExtender.this);            }        });    }    @Override    public String getTabCaption() {        // 返回自定义标签页的标题        return "STG-SortIP";    }    @Override    public Component getUiComponent() {        // 返回自定义标签页中的面板的组件对象        return jSplitPane;    }}